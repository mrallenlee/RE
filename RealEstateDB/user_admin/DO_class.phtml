<?php
include_once "config.phtml";

// Class DOField: = database.table.row.column 
Class DOField {
	var $fieldName;
	var $fieldValue;
	var $fieldType;
	var $isDirty;
	
	public function __construct($name, $value, $type = 'string', $dirty = false) {
		$this->fieldName = $name;
		$this->fieldValue = $value;
		$this->fieldType = $type;
		$this->isDirty = $dirty;
	}
	
	function toXML() {
		return "<" . $this->fieldName . ">" . $this->fieldValue . "</" . $this->fieldName . ">";
	}
}

// Class DataObject: = database.table.row
Class DataObject {
	var $doFields;
	var $doName;
	
	public function __construct($doName, $doFields = array()) {
		$this->doName = $doName;
		$this->doFields = $doFields;
	}
	
	function getField($fieldName) {
		return $this->doFields[$fieldName]->fieldValue;
	} 
	function setField($fieldName, $fieldValue) {
		if (array_key_exists($fieldName, $this->doFields))
			$this->doFields[$fieldName]->fieldValue = $fieldValue;
		else
			$this->doFields[$fieldName] = new DOField($fieldName, $fieldValue);
	}
	
	function toXML() {
		$xml = ""; 
		foreach ($this->doFields as $doField)
			$xml = $xml . $doField->toXML();
			
		return "<DataObject><" . $this->doName . ">" . $xml . "</" . $this->doName . "></DataObject>";
	}

	function fromXML() {
		
	}
}

// Class DataObject: = database.table
Class DOFactory {
	public static function doSql($sql, $rowSize=99999) {
		//print $sql . "<br>";
		
		// Connecting, selecting database
		// $link = mysql_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);
		// mysql_select_db(DB_NAME);
		
		// Use MysqlI for the fetch_all feature to load the result into array
		$localMysqli = mysqli_connect(REAL_ESTATE_DB_SERVER, REAL_ESTATE_DB_USERNAME, REAL_ESTATE_DB_PASSWORD, REAL_ESTATE_DB_NAME) or log_err_die(mysqli_error()  . " Error : Cannot connet to database", $PHP_SELF);

		// Performing SQL query
		$result = mysqli_query($localMysqli, $sql)  or die('Query failed: ' . $sql  . mysqli_error());
		
		if (substr($sql,0,6) != 'select') {
			mysqli_close($localMysqli);
			return $result;
		}

		// Printing results in HTML
		$rows = array();
		while ($line = mysqli_fetch_assoc($result)) {
			$rows[] = $line;
			
			if (count($rows) > $rowSize) break;
		}

		// Free resultset
		mysqli_free_result($result);

		// Closing connection
		mysqli_close($localMysqli);
	
		return $rows;
		
		/*
		$dbh = new PDO("mysql:host=localhost;dbname=yml", "yml", "yml",array(PDO::ATTR_PERSISTENT => true));
		$rows = array();
		foreach ($dbh->query($sql) as $row) {
     		$rows[] = $line;
     		if (count($rows) > $rowSize) break;
   		}
   		
   		$dbh = null;
		return $rows;
		*/
	}
	
	public static function row2DataObject($row, $doName) {
		$dataObject = new DataObject($doName);

		foreach ($row as $col => $val) {
			$dataObject->SetField($col, $val);
		}
		
		return $dataObject;
	}
	
	public static function rows2DataObjects($rows, $doName) {
		$dataObjects = array();
		foreach ($rows as $row) {
			$dataObjects[] = DOFactory::Row2DataObject($row, $doName);
		}

		return $dataObjects;
	}
	
	public static function find($doName, $parameters = array()) {
		$sql = 'select * from ' . $doName;
		
		if (array_key_exists("condition", $parameters))
			$sql = $sql . ' where ' . $parameters['condition'];
		
		if (array_key_exists("sort", $parameters))
			$sql = $sql . ' order by ' . $parameters['sort'];
		
		$rowSize = array_key_exists("rowSize", $parameters) ? 
			$parameters['rowSize'] : 99999;

		$rows = DOFactory::doSql($sql, $rowSize);
		$dataObjects = DOFactory::rows2DataObjects($rows, $doName);
		return $dataObjects;
	}

	public static function findAll($doName) {
		return DOFactory::find($doName);
	}

	public static function findFirst($doName, $parameters = array()) {
		$parameter['rowSize'] = 1;
		$dataObjects = DOFactory::find($doName, $parameters = array());
		if (count($dataObjects) > 0 ) return $dataObjects[0];
	}
	
	public static function create($dataobject) {
		$cols = "";
		$vals = "";
		foreach ($dataobject->doFields as $doField) {
			$cols= $cols . "," . $doField->fieldName;
			$vals= $vals . ",'" .  $doField->fieldValue . "'";
		}
		$sql = 'insert into ' . $dataobject->doName . '('. substr($cols,1) . ') values(' . substr($vals,1) . ')';
		$result = DOFactory::doSql($sql);
		
		return $dataobject;
	}
	
	public static function delete($dataobject) {
		$conds = "";
		$vals = "";
		foreach ($dataobject->doFields as $doField) {
			$conds= $conds . " and " . $doField->fieldName . "='" . $doField->fieldValue . "'";
		}
		$sql = 'delete from ' . $dataobject->doName . ' where '. substr($conds,5);
		$result = DOFactory::doSql($sql);
		
		return $dataobject;
	}

	public static function update($dataobject, $parameters = array()) {
		$upds = "";
		foreach ($dataobject->doFields as $doField) {
			$upds= $upds . "," . $doField->fieldName . "='" . $doField->fieldValue . "'";
		}

		$conds = "";
		foreach ($parameters as $key => $value) {
			$conds= $conds . " and " . $key . "='" . $value . "'";
		}

		$sql = 'update ' . $dataobject->doName . ' set '. substr($upds,1) . ' where ' . substr($conds,5);
		$result = DOFactory::doSql($sql);
		
		return $dataobject;
	}
}


//$doUser = new DataObject("user");
//$doUser->setField("login_name","abc");
//print $doUser->getField("login_name") . "\n";

//$doMyTable = DOFactory::FindAll("sys_rid");
//print_r($doMyTable);

//$doMyTable = DOFactory::Find("sys_rid", array("condition"=>"rid=1"));
//print_r($doMyTable);

//$doMyTable = DOFactory::FindFirst("sys_rid");
//print_r($doMyTable);
//
//$doMyTable = DOFactory::FindFirst("sys_rid");
//print($doMyTable->toXML());

?>
