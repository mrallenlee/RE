<?
include_once "main_include.phtml";
include_once "upgradeOptionAction.phtml";



// global var 
$commit = 1;
$gstRate = $upgradeOptionStatus['GSTRate'] > 0 	? $upgradeOptionStatus['GSTRate'] : getGSTRate();

// SQL for extract cost for each unit, and store into an array
$costSQL = "SELECT Unit.UnitNumber, COALESCE(SumUpgradesCost.Cost , 0) AS Cost
FROM 
    Unit LEFT JOIN 

(SELECT AllUpgrades.UnitNumber, Sum(AllUpgrades.Cost) AS Cost
FROM
    ((SELECT 
    StandardPO.POID, 
    StandardPO.UnitNumber, 
    StandardPO.ItemID, 
    StandardPO.OptionID, 
    StandardPO.ChoiceID, 
    StandardPO.ContractorID, 
    Section.SectionID As SectionID, 
    Subsection.SubsectionID, 
    '' AS Description, 
    StandardPO.Cost, 
    StandardPO.Issued, 
    StandardPO.IssuedDate, 
    Section.Name As SectionName, 
    Subsection.Name As SubsectionName, 
    Options.Name As OptionName, 
    Choice.Name As ChoiceName, 
    Item.Name As ItemName, 
    Contractor.ContractorName, 
    'StandardPO' AS POType 
    FROM 
    Contractor, 
    Price, 
    Item, 
    Subsection, 
    Section, 
    Options, 
    Unit, 
    StandardPO 
    LEFT JOIN Choice ON StandardPO.ChoiceID = Choice.ChoiceID 
    AND StandardPO.OptionID = Choice.OptionID 
    WHERE 
    Cost > -9990
    AND StandardPO.ContractorID = Contractor.ContractorID 
    AND StandardPO.ItemID = Price.ItemID 
    AND StandardPO.OptionID = Price.OptionID 
    AND StandardPO.ItemID = Item.ItemID 
    AND Item.SubsectionID = Subsection.SubsectionID 
    AND Subsection.SectionID = Section.SectionID 
    AND StandardPO.OptionID = Options.OptionID 
    AND StandardPO.UnitNumber = Unit.UnitNumber 
    AND Section.SectionID Not IN (
        Select 
        SectionID 
        FROM 
        Disable_Section_By_Unittype 
        WHERE 
        Disable_Section_By_Unittype.UnitType = Unit.Model
    )
    ) 
    UNION 
    (
        SELECT 
        NonStandardPO.POID, 
        NonStandardPO.UnitNumber, 
        -1 AS ItemID, 
        -1 AS OptionID, 
        -1 AS ChoiceID, 
        NonStandardPO.ContractorID, 
        NonStandardPO.SectionID, 
        NonStandardPO.SubsectionID, 
        NonStandardPO.Description, 
        NonStandardPO.Cost, 
        NonStandardPO.Issued, 
        NonStandardPO.IssuedDate, 
        Section.Name AS SectionName, 
        Subsection.Name AS SubsectionName, 
        '' AS OptionName, 
        '' AS ChoiceName, 
        '' AS ItemName, 
        Contractor.ContractorName, 
        'NonStandardPO' AS POType 
        FROM 
        NonStandardPO, 
        Contractor, 
        Section, 
        Subsection 
        WHERE 
        Cost > -9990
        AND NonStandardPO.SectionID = Section.SectionID 
        AND NonStandardPO.ContractorID = Contractor.ContractorID 
        AND NonStandardPO.SubsectionID = Subsection.SubsectionID
    )) AS AllUpgrades 
    GROUP BY
    AllUpgrades.UnitNumber) AS SumUpgradesCost

    ON Unit.UnitNumber = SumUpgradesCost.UnitNumber    
    ORDER BY Cast(Unit.UnitNumber as SIGNED);"; // $costSQL

$costArray = getSQLArray($costSQL);


?>
<body>
<table border=1>
	<tr>
		<td>Unit Number<t/d>
		<td>Name<t/d>
		<td>Cost</td>
		<td>Total Sales</td>
		<td>Total Incentives</td>
		<td>Total Sales exclude tax</td>
		<td>HST</td>
		<td>Total Sales include Tax</td>
	</tr>
<?



$sql = "SELECT User.UserID, FirstName, LastName, CashPayment, PayByMortgage, OutstandingAmt, Unit.UnitNumber, UnitType
		FROM Unit
		LEFT JOIN User
		ON User.UnitNumber=Unit.UnitNumber
		AND User.DealStatus IN (" . DEAL_STATUS_PURCHASE_INCLUDE_LIST . ") 
		ORDER BY " . getOrderClause(array("columnName"=>"Unit.UnitNumber", "sortMethod"=>DB_SORT_METHOD_VARCHAR_AS_NUMBER));
$result = mysql_query($sql,$db) or handleError("", "SQL=$sql <br>Error=" . mysql_error(), SQL_ERROR, true);	

while ($row = mysql_fetch_array($result))
{

	// Set default values
	$UnitNumber 	= 0;
	$total 		= 0;
	$credit 	= 0;
	$outstandingAmt = 0;

	$userID 	= -1;
	$cashPayment 	= 0;
	$payByMortgage 	= 0;
	$outstandingAmt = 0;

	$userID = $row['UserID'];
	$firstName = $row['FirstName'];
	$lastName = $row['LastName'];
	$cashPayment = $row['CashPayment'];
	$payByMortgage = $row['PayByMortgage'];
	$outstandingAmt = $row['OutstandingAmt'];
	$unitType = $row['UnitType'];
	$UnitNumber = $row['UnitNumber'];

?>

<?
		// A sql to exclude disabled section
		$sql = " SELECT Item.ItemID AS ItemID, Item.Name AS ItemName,
			Options.Name AS OptionsName, Options.Choice AS OptionsChoice,
			Choice.Name AS ChoiceName, UserSave.Price AS Price, Section.SectionID, 
			Subsection.SubsectionID, Section.Name as SectionName,
			Subsection.Name as SubsectionName, UnitNumber
			FROM Section, Subsection, Item
			LEFT JOIN UserSave 
			ON Item.ItemID = UserSave.ItemID
			AND UserSave.UnitNumber = '" . $UnitNumber . "'
			LEFT JOIN Options 
			ON UserSave.OptionID = Options.OptionID
			LEFT JOIN Choice
			ON UserSave.ChoiceID = Choice.ChoiceID
			WHERE Item.SubsectionID = Subsection.SubsectionID
			AND Section.SectionID = Subsection.SectionID
			AND Section.SectionID NOT IN (Select SectionID from 
										Disable_Section_By_Unittype 
										WHERE Disable_Section_By_Unittype.UnitType = '" . $unitType . "')
			;";

		$userSave_result = mysql_query($sql,$db) or handleError("", "SQL=$sql <br>Error=" . mysql_error(), SQL_ERROR, true);	
		while ($userSave_row = mysql_fetch_array($userSave_result))
		{
			$ItemID = $userSave_row['ItemID'];
			// Check all the options for ItemName is -9999 or not. 
			// If all of the price in the options are -9999, don't show this item
/*			No need to show all the options details for summary

			// get all options for this item first, then check the price for the options
			$sql_Option = "SELECT Options.OptionID, Name FROM Item_Options, Options " .
							"WHERE ItemID=$ItemID " .
							"AND Item_Options.OptionID = Options.OptionID" 
							;
			$result_Option = mysql_query($sql_Option,$db) or handleError("", "SQL=$sql <br>Error=" . mysql_error(), SQL_ERROR, true);	
			// init the flag to be false
			$show = "false";
			// check all the prices of the options, if all of them are not OPTION_IS_NOT_UNAVAILABLE, 
			// set show to be "true", which means show the item

			while ($row_Option = mysql_fetch_array($result_Option))
			{
				$OptionID = $row_Option['OptionID'];
				$sql_Price = "SELECT Price.Price as Price 
							FROM Price
							WHERE ItemID = $ItemID
							AND OptionID = $OptionID
							AND UnitType = '$UnitType'";

				$result_Price = mysql_query($sql_Price,$db) or handleError("", "SQL=$sql_Price <br>Error=" . mysql_error(), SQL_ERROR, true);	
				$row_Price = mysql_fetch_array($result_Price);
				if ($row_Price['Price'] != OPTION_IS_NOT_AVAILABLE)
				{
					$show = "true";
				}
			} // end of row_Option while
*/


			// if show equals to false, don't show this item, and continue the loop
			if ($show == "false")
			{
				continue;
			}
			
			// if user saved option name is not required, do not display this item
			if (trim($userSave_row['OptionsName']) == OPTION_IS_NOT_REQUIRED ){
				continue;
			}
			
	
			if ($userSave_row['Price'] == "" || $userSave_row['Price'] == 0)
			{ 
				// do nothing or print NA on screen
				$a = 1;
			}
			else {
				if ($userSave_row['Price'] != OPTION_IS_NOT_AVAILABLE
					&& $userSave_row['Price'] != OPTION_IS_A_STANDARD
					&& $userSave_row['Price'] != OPTION_IS_INCENTIVE)
				{		
					if ($userSave_row['Price'] > 0){		
	//print ("UnitNumber=$UnitNumber total=$total price=" . $userSave_row['Price']);
						$total += $userSave_row['Price'];
					} else {
	//print ("UnitNumber=$UnitNumber credit=$credit price=" . $userSave_row['Price']);
						$credit += $userSave_row['Price'];	
					}
				}
			}

			//$userSave_row['OptionsName'] $userSave_row['OptionsChoice'] $userSave_row['ChoiceName']<br>";
		}// end of userSave loop

	
$sql = "SELECT Description, Price
		FROM UserOption
		WHERE UnitNumber = '$UnitNumber'";
$useroption_result = mysql_query($sql,$db) or handleError("", "SQL=$sql <br>Error=" . mysql_error(), SQL_ERROR, true);	
$numOfAddChange = 0;

if (mysql_num_rows($useroption_result) > 0)
{
	for ($i=0;$useroption_row = mysql_fetch_array($useroption_result);$i++)
	{
		if ($useroption_row['Price'] < 0){
			$credit += $useroption_row['Price'];
		}
		else{
			$total += $useroption_row['Price'];
		}
	} // end of useroption loop
	$numOfAddChange = $i;
	
}

$total_sales = $total + $credit;
// Set total sales to 0 if is negative because of higher incentive value
$total_sales = $total_sales > 0 ? $total_sales : 0;
$gstAmount = $total_sales * $gstRate;
$total_with_tax = $total_sales + $gstAmount;


if ( $total_sales < 0 ) // Don't tax -ve values
{
	$gstAmount = 0;
	$total_with_tax = $total_sales;
}

$projectCostTotal += $costArray[$UnitNumber]['Cost'];
$projectTotal += $total;
$projectTotalGST += $gstAmount;
$projectTotalCredit += $credit;
$projectTotalSales += $total_sales;

$outstandingAmt_to_display = $total_with_tax;// - $cashPayment - $payByMortgage;

$projectTotalOutstandingAmt += $outstandingAmt_to_display;
$projectTotalOutAmtWithTax = $projectTotalOutstandingAmt - $projectTotalCredit;

?>
	<tr>
		<td><?= $UnitNumber; ?></td>
		<td><?= $firstName . " " . $lastName; ?></td>	 	
		<td><?= number_format($costArray[$UnitNumber]['Cost'], 2)?></td>
		<td><?= number_format($total, 2)?></td>
		<td><?= number_format($credit, 2)?></td>
		<td><?= number_format($total_sales, 2)?></td>
		<td><?= number_format($gstAmount, 2)?></td>
		<td><?= number_format($outstandingAmt_to_display, 2)?></td>
	</tr>
<?
	}


?>
	<tr>
		<td>Total</td>
		<td></td>
		<td><?= number_format($projectCostTotal, 2)?></td>
		<td><?= number_format($projectTotal, 2)?></td>
		<td><?= number_format($projectTotalCredit, 2)?></td>
		<td><?= number_format($projectTotalSales, 2)?></td>
		<td><?= number_format($projectTotalGST, 2)?></td>
		<td><?= number_format($projectTotalOutstandingAmt, 2)?></td>
		<td></td>
	</tr>

</table>

